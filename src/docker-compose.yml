version: '3.8'

networks:
  telemetryNetwork:
    driver: bridge

services:
  mongodb:
    container_name: mongodb
    image: mongo
    restart: always
    networks:
      - telemetryNetwork
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME_SKELETON}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD_SKELETON}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE_SKELETON}
    volumes:
      - ./docker/MongoDB/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - mongodb_data:/data

  mysql:
    container_name: mysql
    image: mysql
    networks:
      - telemetryNetwork
    ports: 
      - 3306:3306
    environment: 
      MYSQL_DATABASE: ${MYSQL_DATABASE_SKELETON}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD_SKELETON}
    volumes: 
      - ./docker/MySqlDatabaseInit/InitMysql.sql:/docker-entrypoint-initdb.d/init.sql:rw
      - mysql_data:/data

  redis:
    container_name: redis
    image: redis
    networks:
      - telemetryNetwork
    ports:
      - 6379:6379
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD_SKELETON}
    volumes:
      - redis_data:/data

 ########
## Logs ##
 ########

  seq-logs:
    container_name: seq_logging
    image: datalust/seq:latest
    networks:
      - telemetryNetwork
    ports:
      - 5341:80
      - "5342:5342"
      - "45341:45341"
    environment:
      - ACCEPT_EULA=Y
    volumes:
      - seq_data:/data

 ############
## End Logs ##
 ############

 ###########################
# Telemetry configuration #
###########################

  opentelemetry-collector:
    image: otel/opentelemetry-collector:latest
    container_name: opentelemetry_collector
    networks:
      - telemetryNetwork
    command: [ "--config=/etc/openTelemetry.yaml" ]
    volumes:
      - ./docker/Observability/openTelemetry.yaml:/etc/openTelemetry.yaml
    ports:
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "4317:4317"   # OTLP gRPC receiver


  prometheus-opentelemetry:
    image: prom/prometheus:latest
    container_name: prometheus_opentelemetry
    networks:
      - telemetryNetwork
    volumes:
      - ./docker/Observability/prometheus.yaml:/etc/prometheus/prometheus.yml
      - prometheus_metrics_data:/prometheus
    ports:
      - 9090:9090


  grafana-opentelemetry:
    image: grafana/grafana
    container_name: grafana_opentelemetry
    networks:
      - telemetryNetwork
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER_SKELETON}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD_SKELETON}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP_SKELETON}
    volumes:
      - ./docker/Observability/grafana.yaml:/etc/grafana/provisioning/datasources/all.yaml
      - ./docker/Observability/grafanaDotnetDashboard.json:/etc/grafana/provisioning/dashboards/dashboard.json
      - grafana_metrics_data:/var/lib/grafana
    ports:
      - 3000:3000
  

  zipkin-opentelemetry:
    image: openzipkin/zipkin:latest
    container_name: zipkin_opentelemetry
    networks:
      - telemetryNetwork
    ports:
      - "9411:9411"

###############################
# Telemetry configuration end #
###############################

volumes:
  mongodb_data:
  mysql_data:
  redis_data:
  prometheus_metrics_data:
  grafana_metrics_data:
  seq_data:
  